datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

// table for prisma session store
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt   DateTime
}


model PersonalInfo {
  id          String           @id @default(uuid())
  type        PersonalInfoType
  phoneNumber String?          @db.VarChar(10)
  address     String?          @db.VarChar(255)
  email       String?          @db.VarChar(255)
  description String?          @db.VarChar(255)
  // employeeId  Int?             @unique
  // providerId  Int?
  // clientId    Int?
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  created_by  Int
  updated_by  Int?

  @@map("personalInfo")
}

model Provider {
  id          String   @id @default(uuid())
  fullName    String   @unique @db.VarChar(255)
  displayName String   @db.VarChar(255)
  portal      String   @db.VarChar(255)
  notes       String   @db.VarChar(1020)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  // updated_by  Int?
  // created_by  String
  plans       Plan[]
  clients     Client[]

  @@map("provider")
}

model Plan {
  id          String       @id @default(uuid())
  description String       @db.VarChar(255)
  provider    Provider     @relation(fields: [providerId], references: [id])
  providerId  String
  category    CodeCategory
  code        String       @db.VarChar(255)

  @@map("plan")
}

model Employee {
  id             String          @id @default(uuid()) @unique
  fullName       String          @db.VarChar(255)
  displayName    String          @unique @db.VarChar(255)
  email          String?         @unique @db.VarChar(255)
  password       String          @db.VarChar(255)
  birthdate      String?         @db.VarChar(8)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  position       Position
  Administration Administration?
  Billing        Billing?
  Bcba           Bcba?
  Rbt            Rbt?
  logins         Login[]

  @@map("employee")
}

model Login {
  id         String    @id @default(uuid()) @unique
  loginTime  DateTime  @default(now())
  logoutTime DateTime? 
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId String
  loggedIn   LoggedIn?
  
  @@index([id, employeeId])
  @@map("login")
}

model LoggedIn {
  id         String   @default(uuid())
  sid        String   @unique
  employeeId String   @unique
  loginId    String
  login      Login    @relation(fields: [loginId, employeeId], references: [id, employeeId])
  
  @@index([id, employeeId, loginId], name: "id")
  @@map("loggedIn")
}

model Administration {
  id              String          @id @default(uuid())
  employee        Employee        @relation(fields: [employeeId], references: [id])
  employeeId      String
  PermissionLevel PermissionLevel @default(LIMITED)

  @@index([employeeId], name: "employeeId")
  @@map("administration")
}

model Billing {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String


  @@index([employeeId], name: "employeeId")
  @@map("billing")
}

model BillingObject {
  id         String        @id @default(uuid())
  sessiondId Int           @unique
  notes      String?       @db.VarChar(510)
  status     BillingStatus @default(STAGE_0)
  start_time DateTime      @default(now())
  end_time   DateTime?

  @@map("billingObject")
}

model Rbt {
  id         String    @id @default(uuid())
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId String
  bcba       Bcba?     @relation(fields: [bcbaId], references: [id])
  bcbaId     String?
  sessions   ClientSession[]

  @@index([employeeId], name: "employeeId")
  @@map("rbt")
}

model Bcba {
  id            String          @id @default(uuid())
  employee      Employee        @relation(fields: [employeeId], references: [id])
  employeeId    String
  rbts          Rbt[]
  clients       Client[]
  treatmentPlan TreatmentPlan[]
  programs      Program[]
  sessions      ClientSession[]

  @@index([employeeId], name: "employeeId")
  @@map("bcba")
}

model TreatmentPlan {
  id          Int                        @id @default(autoincrement())
  title       String                     @db.VarChar(50)
  description String?                    @db.VarChar(510)
  bcba        Bcba                       @relation(fields: [created_by], references: [id])
  created_by  String
  created_at  DateTime                   @default(now())
  client      Client                     @relation(fields: [clientId], references: [id])
  clientId    String
  programs    TreatmentPlan_to_Program[]

  // @@index([id], name: "id")
  @@map("treatmentPlan")
}

model Client {
  id             String          @id @default(uuid())
  fullName       String          @db.VarChar(255)
  displayName    String?         @unique @db.VarChar(255)
  birthdate      String?         @db.VarChar(8)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  // updated_by      String?
  // created_by      String
  renewalDate    String?         @db.VarChar(8)
  provider       Provider?       @relation(fields: [providerId], references: [id])
  providerId     String?
  bcba           Bcba?           @relation(fields: [bcbaId], references: [id])
  bcbaId         String?
  treatmentPlans TreatmentPlan[]
  sessions       ClientSession[]
  // @@index([providerId], name: "providerId")

  @@map("client")
}

model ClientSession {
  id         Int          @id @default(autoincrement())
  notes      String       @db.VarChar(510)
  start_time DateTime
  end_time   DateTime     @default(now())
  category   CodeCategory
  client     Client       @relation(fields: [clientId], references: [id])
  clientId   String
  // provider     Provider         @relation(fields: [providerId], references: [id])
  // providerId   String
  bcba       Bcba?        @relation(fields: [bcbaId], references: [id])
  bcbaId     String?
  rbt        Rbt?         @relation(fields: [rbtId], references: [id])
  rbtId      String?
  records    Record[]
  // @@index([bcbaId, rbtId, clientId], name: "bcbaId")

  @@map("clientSession")
}

model Program {
  id             Int                        @id @default(autoincrement())
  title          String                     @db.VarChar(50)
  description    String?                    @db.VarChar(510)
  bcba           Bcba                       @relation(fields: [created_by], references: [id])
  created_by     String
  updated_at     DateTime                   @updatedAt
  vsibility      Visibility                 @default(PRIVATE)
  category       ProgramCategory            @default(MISC)
  created_at     DateTime                   @default(now())
  type           ProgramType
  treatmentPlans TreatmentPlan_to_Program[]
  records        Record[]

  @@map("program")
}

model TreatmentPlan_to_Program {
  added_at        DateTime      @default(now())
  treatmentPlan   TreatmentPlan @relation(fields: [treatmentPlanId], references: [id])
  treatmentPlanId Int
  program         Program       @relation(fields: [programId], references: [id])
  programId       Int

  // @@index([treatmentPlanId], name: "treatmentPlanId")
  @@id([treatmentPlanId, programId])
  @@map("treatmentPlan_to_program")
}

model Record {
  id        Int     @id @default(autoincrement())
  session   ClientSession @relation(fields: [sessionId], references: [id])
  sessionId Int
  program   Program @relation(fields: [programId], references: [id])
  programId Int
  results   String  @db.VarChar(255)

  @@map("record")
}

enum Position {
  ADMIN
  MANAGEMENT
  BILLING
  BCBA
  RBT
  DEFAULT
}

enum PermissionLevel {
  SERVER_ADMIN_ALL
  BUSINESS_ALL
  LIMITED
  OTHER
}

enum BillingStatus {
  STAGE_0
  STAGE_1
  STAGE_2
  FINISHED
}

enum PersonalInfoType {
  PARENTS
  INSURANCE
  OTHER
}

enum CodeCategory {
  RBT
  BCBA
  SUP_RBT
  SUP_BCBA
  TRAIN_RBT
  TRAIN_BCBA
  OTHER
}

enum ProgramCategory {
  COMMUNICATION
  BEHAVIOR_SKILLS
  SOCIAL_SKILLS
  PLAYnLEISURE_SKILLS
  INDEPENDENT_SKILLS
  BEHAVIOR_REDUCTIONS
  MISC
}

enum ProgramType {
  YES_OR_NO
  LIST_YES_OR_NO
  COUNTER_SUM
  COUNTER_RESTART
  MULTIPLE_CHOICE
  SCALE_FIVE
  SCALE_TEN
  TEXT_SMALL
  TEXT_MEDIUM
  TEXT_LARGE
  NONE
}

enum Visibility {
  PRIVATE
  PUBLIC
}
