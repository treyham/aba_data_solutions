generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PersonalInfo {
  id          String           @id @default(uuid())
  type        PersonalInfoType
  phoneNumber String?          @db.VarChar(10)
  address     String?          @db.VarChar(255)
  email       String?          @db.VarChar(255)
  description String?          @db.VarChar(255)
  employeeId  Int?             @unique
  providerId  Int?
  clientId    Int?
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  created_by  Int
  updated_by  Int?

  @@map("personalInfo")
}

model Provider {
  id          String   @id @default(uuid())
  fullName    String   @unique @db.VarChar(255)
  displayName String   @db.VarChar(255)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  updated_by  Int?
  created_by  Int
  plans       Plan[]
  clients     Client[]
  sessions    Session[]

  @@map("provider")
}

model Plan {
  id          String       @id @default(uuid())
  description String       @db.VarChar(255)
  provider    Provider     @relation(fields: [providerId], references: [id])
  providerId  String
  category    CodeCategory
  code        String       @db.VarChar(255)

  @@map("plan")
}

model Client {
  id          String   @id @default(uuid())
  fullName    String   @db.VarChar(255)
  displayName String?  @unique @db.VarChar(255)
  birthdate   String?  @db.VarChar(8)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  updated_by  Int?
  created_by  Int
  renewalDate String?  @db.VarChar(8)
  provider    Provider @relation(fields: [providerId], references: [id])
  providerId  String
  bcba        Bcba?     @relation(fields: [bcbaId], references: [id])
  bcbaId      String?
  treatmentPlans  TreatmentPlan[]
  sessions    Session[]
  // @@index([providerId], name: "providerId")
  @@map("client")
}

model Employee {
  id          String    @id @default(uuid())
  fullName    String    @db.VarChar(255)
  displayName String    @unique @db.VarChar(255)
  email       String    @unique @db.VarChar(255)
  password    String    @db.VarChar(255)
  birthdate   String?   @db.VarChar(8)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  position    Position
  Head        Head?     
  Billing     Billing?  
  Bcba        Bcba?     
  Rbt         Rbt?      
  logins      Login[]

  @@map("employee")
}

model Login {
  id           String     @id @default(uuid())
  login_time   DateTime  @default(now())
  logout_time  DateTime?
  employee     Employee  @relation(fields: [employeeId], references: [id])
  employeeId   String

  @@index([employeeId], name: "employeeId")
  @@map("login")
}

model Head {
  id           String    @id @default(uuid())
  employee     Employee  @relation(fields: [employeeId], references: [id])
  employeeId   String


  @@index([employeeId], name: "employeeId")
  @@map("head")
}

model Billing {
  id           String    @id @default(uuid())
  employee     Employee  @relation(fields: [employeeId], references: [id])
  employeeId   String
  

  @@index([employeeId], name: "employeeId")
  @@map("billing")
}

model Rbt {
  id           String    @id @default(uuid())
  employee     Employee  @relation(fields: [employeeId], references: [id])
  employeeId   String
  bcba         Bcba      @relation(fields: [bcbaId], references: [id])
  bcbaId       String
  sessions     Session[]
  @@index([employeeId], name: "employeeId")
  @@map("rbt")
}

model Bcba {
  id              String    @id @default(uuid())
  employee        Employee  @relation(fields: [employeeId], references: [id])
  employeeId      String
  rbts            Rbt[]
  clients         Client[]
  treatmentPlan   TreatmentPlan[]
  programs        Program[]
  sessions        Session[]

  @@index([employeeId], name: "employeeId")
  @@map("bcba")
}

model TreatmentPlan {
  id          Int             @id @default(autoincrement())
  title       String          @db.VarChar(50)
  description String?         @db.VarChar(510)
  bcba        Bcba            @relation(fields: [created_by], references: [id])
  created_by  String
  created_at  DateTime        @default(now())
  client      Client          @relation(fields: [clientId], references: [id])
  clientId    String
  programs    Program[]
}

model Session {
  id           Int              @id @default(autoincrement())
  notes        String           @db.VarChar(510)
  start_time   DateTime
  end_time     DateTime         @default(now())
  category     CodeCategory
  client       Client           @relation(fields: [clientId], references: [id])
  clientId     String
  provider     Provider         @relation(fields: [providerId], references: [id])
  providerId   String
  bcba         Bcba?            @relation(fields: [bcbaId], references: [id])
  bcbaId       String?
  rbt          Rbt?             @relation(fields: [rbtId], references: [id])
  rbtId        String?
  records      Record[]
  // @@index([bcbaId, rbtId, clientId], name: "bcbaId")
  @@map("session")
}

model Program {
  id          Int                 @id @default(autoincrement())
  title       String              @db.VarChar(50)
  description String?             @db.VarChar(510)
  bcba        Bcba                @relation(fields: [created_by], references: [id])
  created_by  String
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  vsibility   Visibility          @default(PRIVATE)
  category    ProgramCategory     @default(MISC)
  type        ProgramType
  treatmentPlans  TreatmentPlan   @relation(fields: [trPlanId], references: [id])
  trPlanId    Int
  records     Record[]

  @@map("program")
}

// model ProgramToTreatmentPlan {
//   id              Int             @id @default(autoincrement())
//   program         Program         @relation(fields: [programId], references: [id])
//   programId       Int
//   treatmentPlan   TreatmentPlan   @relation(fields: [treatPId], references: [id])
//   treatPId        Int
// }

model Record {
  id          Int                @id @default(autoincrement())
  session     Session            @relation(fields: [sessionId], references: [id])
  sessionId   Int
  program     Program            @relation(fields: [programId], references: [id])
  programId   Int
  results     String             @db.VarChar(255)

  @@map("record")
}

model BillingObject {
  id          String       @id @default(uuid())
  sessiondId Int           @unique
  notes      String        @db.VarChar(510)
  status     BillingStatus @default(STAGE_0)
  start_time DateTime      @default(now())
  end_time   DateTime?

  @@map("billingObject")
}


enum Position {
  ADMIN
  HEAD
  MANAGEMENT
  BILLING
  BCBA
  RBT
  DEFAULT
}

enum BillingStatus {
  STAGE_0
  STAGE_1
  STAGE_2
  FINISHED
}

enum PersonalInfoType {
  PARENTS
  INSURANCE
  OTHER
}

enum CodeCategory {
  RBT
  BCBA
  SUP_RBT
  SUP_BCBA
  TRAIN_RBT
  TRAIN_BCBA
  OTHER
}

enum ProgramCategory {
  BEHAVIOR_NEG
  BEHAVIOR_POS
  SPEECH
  MISC
}

enum ProgramType {
  YES_OR_NO
  LIST_YES_OR_NO
  COUNTER_SUM
  COUNTER_RESTART
  MULTIPLE_CHOICE
  SCALE_FIVE
  SCALE_TEN
  TEXT_SMALL
  TEXT_MEDIUM
  TEXT_LARGE
  NONE
}

enum Visibility {
  PRIVATE
  PUBLIC
}